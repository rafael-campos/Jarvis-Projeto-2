//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace robo1._3.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.WebService1Soap")]
    public interface WebService1Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIpc", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetIpc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIpc", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetIpcAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetAut();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAut", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetAutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetSer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSer", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetSerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/insertPci", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string insertPci(string serial, string pci, string sk, string iup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/insertPci", ReplyAction="*")]
        System.Threading.Tasks.Task<string> insertPciAsync(string serial, string pci, string sk, string iup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Vpci", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Vpci(string pci, string ipr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Vpci", ReplyAction="*")]
        System.Threading.Tasks.Task<string> VpciAsync(string pci, string ipr);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebService1SoapChannel : robo1._3.ServiceReference1.WebService1Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebService1SoapClient : System.ServiceModel.ClientBase<robo1._3.ServiceReference1.WebService1Soap>, robo1._3.ServiceReference1.WebService1Soap {
        
        public WebService1SoapClient() {
        }
        
        public WebService1SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HelloWorld() {
            return base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public string GetIpc() {
            return base.Channel.GetIpc();
        }
        
        public System.Threading.Tasks.Task<string> GetIpcAsync() {
            return base.Channel.GetIpcAsync();
        }
        
        public string GetAut() {
            return base.Channel.GetAut();
        }
        
        public System.Threading.Tasks.Task<string> GetAutAsync() {
            return base.Channel.GetAutAsync();
        }
        
        public string GetSer() {
            return base.Channel.GetSer();
        }
        
        public System.Threading.Tasks.Task<string> GetSerAsync() {
            return base.Channel.GetSerAsync();
        }
        
        public string insertPci(string serial, string pci, string sk, string iup) {
            return base.Channel.insertPci(serial, pci, sk, iup);
        }
        
        public System.Threading.Tasks.Task<string> insertPciAsync(string serial, string pci, string sk, string iup) {
            return base.Channel.insertPciAsync(serial, pci, sk, iup);
        }
        
        public string Vpci(string pci, string ipr) {
            return base.Channel.Vpci(pci, ipr);
        }
        
        public System.Threading.Tasks.Task<string> VpciAsync(string pci, string ipr) {
            return base.Channel.VpciAsync(pci, ipr);
        }
    }
}
